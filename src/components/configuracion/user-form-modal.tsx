
"use client";

import { useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import type { UserCredentials } from '@/types';
import { toast } from '@/hooks/use-toast';
import { Save, X, UserPlus, Edit3, KeyRound } from 'lucide-react';
import { useAuth } from '@/contexts/auth-context';


// Schema for user form, password handling adjusted for plaintext storage
const getUserSchema = (isEditing: boolean, isEditingAdmin: boolean) => {
  return z.object({
    username: z.string().min(3, { message: 'El nombre de usuario debe tener al menos 3 caracteres.' }),
    password: z.string()
      .min(isEditing && !isEditingAdmin ? 0 : 6, { message: 'La contraseña debe tener al menos 6 caracteres.'})
      .optional(),
    confirmPassword: z.string().optional(),
  }).refine(data => {
    if (!isEditing) { // New user
      if (!data.password || data.password.length < 6) return false; 
      return data.password === data.confirmPassword;
    }
    if (data.password) { // Existing user, password change attempted
      if (isEditingAdmin && data.password.length > 0) return false; // Admin password cannot be changed here
      if (data.password.length < 6) return false;
      return data.password === data.confirmPassword;
    }
    return true; // No password change attempted
  }, {
    message: "Las contraseñas no coinciden o no cumplen los requisitos.",
    path: ["confirmPassword"],
  }).refine(data => {
     if (!isEditing && (!data.password || data.password.length === 0)) return false;
     return true;
  }, {
    message: "La contraseña es requerida para nuevos usuarios.",
    path: ["password"],
  });
};


export type UserFormValues = z.infer<ReturnType<typeof getUserSchema>>;

interface UserFormModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmitUser: (data: UserCredentials, originalId?: string) => void;
  editingUser?: UserCredentials | null;
  allUsers: UserCredentials[]; 
}

export default function UserFormModal({
  isOpen,
  onClose,
  onSubmitUser,
  editingUser,
  allUsers,
}: UserFormModalProps) {
  const { user: currentUser } = useAuth(); 

  const isEditingAdmin = !!editingUser && editingUser.username === 'admin';
  const currentFormSchema = getUserSchema(!!editingUser, isEditingAdmin);

  const form = useForm<UserFormValues>({
    resolver: zodResolver(currentFormSchema),
    defaultValues: {
      username: '',
      password: '',
      confirmPassword: '',
    },
  });

  useEffect(() => {
    if (isOpen) {
      if (editingUser) {
        form.reset({
          username: editingUser.username,
          password: '', 
          confirmPassword: '',
        });
      } else {
        form.reset({
          username: '',
          password: '',
          confirmPassword: '',
        });
      }
    }
  }, [isOpen, editingUser, form]);

  const handleSubmit = (data: UserFormValues) => {
    const usernameExists = allUsers.some(
      u => u.username.toLowerCase() === data.username.toLowerCase() && u.id !== editingUser?.id
    );
    if (usernameExists) {
      form.setError("username", { type: "manual", message: "Este nombre de usuario ya existe." });
      return;
    }

    // Admin password change restriction
    if (isEditingAdmin && data.password && data.password.length > 0) {
        toast({
            title: "Operación no permitida",
            description: "La contraseña del administrador no puede ser cambiada desde esta interfaz.",
            variant: "destructive",
        });
        // Optionally, clear password fields or simply don't submit password change
        // For now, we just prevent submission of password change
        return; 
    }
    
    const finalUserData: UserCredentials = {
      id: editingUser?.id || '', // ID will be generated by parent if new
      username: data.username,
      // Use new password if provided and valid, otherwise keep existing password_plaintext
      password_plaintext: (data.password && data.password.length > 0 && !isEditingAdmin) 
                          ? data.password 
                          : (editingUser ? editingUser.password_plaintext : (data.password || '')),
    };

    onSubmitUser(finalUserData, editingUser?.id);
    toast({
      title: editingUser ? "Usuario Actualizado" : "Usuario Creado",
      description: `El usuario ${data.username} ha sido ${editingUser ? 'actualizado' : 'creado'}.`
    });
    onClose();
  };

  if (!isOpen) return null;

  const title = editingUser ? "Editar Usuario" : "Crear Nuevo Usuario";
  const description = editingUser ? "Modifica los detalles del usuario." : "Completa los datos para el nuevo usuario.";
  const Icon = editingUser ? Edit3 : UserPlus;

  return (
    <Dialog open={isOpen} onOpenChange={(open) => { if (!open) onClose(); }}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2"><Icon size={22}/> {title}</DialogTitle>
          <DialogDescription>{description}</DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4 py-4">
            <FormField
              control={form.control}
              name="username"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nombre de Usuario</FormLabel>
                  <FormControl>
                    <Input placeholder="Ej: doctor.house" {...field} disabled={isEditingAdmin && currentUser?.username !== 'admin'} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* Password fields are hidden if editing admin user */}
            {!isEditingAdmin && (
              <>
                <FormField
                  control={form.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{editingUser ? "Nueva Contraseña (opcional)" : "Contraseña"}</FormLabel>
                       <div className="relative">
                         <FormControl>
                            <Input type="password" placeholder="••••••••" {...field} />
                         </FormControl>
                         <KeyRound className="absolute right-2 top-1/2 h-4 w-4 -translate-y-1/2 opacity-50" />
                       </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="confirmPassword"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Confirmar Contraseña</FormLabel>
                      <div className="relative">
                        <FormControl>
                            <Input type="password" placeholder="••••••••" {...field} />
                        </FormControl>
                        <KeyRound className="absolute right-2 top-1/2 h-4 w-4 -translate-y-1/2 opacity-50" />
                       </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </>
            )}
             {isEditingAdmin && (
                <p className="text-sm text-muted-foreground p-2 border rounded-md bg-secondary/50">
                    La contraseña del usuario 'admin' no puede ser modificada desde esta interfaz.
                </p>
            )}

            <DialogFooter className="pt-6">
              <DialogClose asChild>
                <Button type="button" variant="outline" onClick={onClose}>
                    <X size={18} className="mr-2"/> Cancelar
                </Button>
              </DialogClose>
              <Button type="submit" disabled={form.formState.isSubmitting || (isEditingAdmin && form.getValues("password") !== "" && form.getValues("password") !== undefined)}>
                <Save size={18} className="mr-2"/> 
                {editingUser ? 'Guardar Cambios' : 'Crear Usuario'}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
